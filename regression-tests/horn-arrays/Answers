
lazabs.horn.tests.MainArrays
Solving List(Clause(p0(1, cnt, a),List(),true), Clause(p1(0, 0, a),List(p0(1, cnt, a)),true), Clause(p2(c, cnt, a),List(p1(c, cnt, a)),(((4 + -1 * cnt) + -1) >= 0)), Clause(p0(c, cnt, a),List(p1(c, cnt, a)),((cnt + -4) >= 0)), Clause(p1(c, (cnt + 1), a),List(p2(c, cnt, a)),((select(a, (cnt + 1)) + -1 * select(a, cnt)) >= 0)), Clause(p1(1, (cnt + 1), store(store(a, cnt, select(a, (cnt + 1))), (cnt + 1), select(a, cnt))),List(p2(c, cnt, a)),(((select(a, cnt) + -1 * select(a, (cnt + 1))) + -1) >= 0)), Clause(p3(0, cnt, a),List(p0(0, cnt, a)),true), Clause(FALSE,List(p3(c, cnt, a)),((k = 3) & (((select(a, k) + -1 * select(a, (k + 1))) + -1) >= 0)))) ...
Theories: Types, SimpleArray(1)
Unique satisfiable clauses: 8
   1 clauses with 0 body literals
   7 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      6
Final number of abstract states:                       5
Final number of matched abstract states:               12
Final number of abstract edges:                        18
Number of generated predicates:                        11
Average predicate size (# of sub-formulas):            1.64

--------------------------------------------------------------------------------


SOLVABLE: 
Solving List(Clause(p0(x, a),List(),true), Clause(p1(0, a),List(p0(x, a)),true), Clause(p2(x, store(a, x, x)),List(p1(x, a)),(((3 + -1 * x) + -1) >= 0)), Clause(p1((x + 1), a),List(p2(x, a)),true), Clause(p3(x, a),List(p1(x, a)),((x + -3) >= 0)), Clause(FALSE,List(p3(x, a)),!(select(a, 0) = 0))) ...
Theories: Types, SimpleArray(1)
Unique satisfiable clauses: 6
   1 clauses with 0 body literals
   5 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      4
Final number of abstract states:                       5
Final number of matched abstract states:               9
Final number of abstract edges:                        10
Number of generated predicates:                        8
Average predicate size (# of sub-formulas):            1.00

--------------------------------------------------------------------------------


SOLVABLE: 

lazabs.horn.tests.MainADT
ADT: ADT(p)

Clause(i1(p(0, true)),List(),true)
Clause(i2(p((left(p) + 1), (1 + -1 * right(p)))),List(i1(p)),true)
Clause(i1(p(2 * left(p), (1 + -1 * right(p)))),List(i2(p)),true)
Clause(FALSE,List(i1(p)),(!(left(p) >= 0) | !(right(p) = true)))

Solving ...
------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             4         2


Theories: Types, ADT(p), ADT(true, false)
Unique satisfiable clauses: 3
   1 clauses with 0 body literals
   2 clauses with 1 body literals
Warning: type clash during inference: bool vs int

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      2
Final number of abstract states:                       2
Final number of matched abstract states:               2
Final number of abstract edges:                        3
Number of generated predicates:                        3
Average predicate size (# of sub-formulas):            1.67

--------------------------------------------------------------------------------

Left(

lazabs.horn.tests.MainList
ADT: ADT(red, green, blue, nil, cons)

Clause(C(nil, y, y),List(),true)
Clause(C(cons(c, x), y, cons(c, r)),List(C(x, y, r)),true)
Clause(S(nil, 0),List(),true)
Clause(S(cons(c, x), (n + 1)),List(S(x, n)),true)
Clause(FALSE,List(S(x, n)),!(n >= 0))
Clause(FALSE,List(C(x, y, r)),!((clist_size(r) + -1 * 1) = (((clist_size(x) + -1 * 1) + clist_size(y)) + -1 * 1)))
Clause(FALSE,List(C(x, y, r)),!(EPS EX EX EX (((((_0 = (clist_size(r) + -1 * 1)) & (_1 = mul(_3, _2))) & (_2 = 2)) & ((_0 + -1 * _1) >= 0)) & (((_1 + -1 * (_0 + -1 * \if ((_2 >= 0)) \then (_2) \else (-1 * _2))) + -1) >= 0)) = (EPS EX EX EX (((((_0 = (clist_size(x) + -1 * 1)) & (_1 = mul(_3, _2))) & (_2 = 2)) & ((_0 + -1 * _1) >= 0)) & (((_1 + -1 * (_0 + -1 * \if ((_2 >= 0)) \then (_2) \else (-1 * _2))) + -1) >= 0)) + EPS EX EX EX (((((_0 = (clist_size(y) + -1 * 1)) & (_1 = mul(_3, _2))) & (_2 = 2)) & ((_0 + -1 * _1) >= 0)) & (((_1 + -1 * (_0 + -1 * \if ((_2 >= 0)) \then (_2) \else (-1 * _2))) + -1) >= 0)))))
Clause(FALSE,List(S(x, n)),!((2 * n + 1) = clist_size(x)))
Clause(FALSE,List(C(x, y, r)),((!(r = nil) & !(head(x) = head(r))) & !(head(y) = head(r))))

Solving ...
------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             9         2


Theories: Types, ADT(red, green, blue, nil, cons), BitShiftMultiplication
Unique satisfiable clauses: 8
   2 clauses with 0 body literals
   6 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      4
Final number of abstract states:                       3
Final number of matched abstract states:               4
Final number of abstract edges:                        6
Number of generated predicates:                        7
Average predicate size (# of sub-formulas):            1.14

--------------------------------------------------------------------------------

Left(

lazabs.horn.tests.MainBV

Clause(i1(0),List(),true)
Clause(i2(bv_add(8, x, mod_cast(0, 255, 1))),List(i1(x)),bv_ult(8, x, mod_cast(0, 255, 100)))
Clause(i1(bv_add(8, x, mod_cast(0, 255, 2))),List(i2(x)),true)
Clause(FALSE,List(i1(x)),!bv_ult(8, x, mod_cast(0, 255, 200)))

Solving ...
------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             4         2


Theories: Types, GroebnerMultiplication, ModuloArithmetic
State hashing enabled
Unique satisfiable clauses: 2
   1 clauses with 0 body literals
   1 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      0
Final number of abstract states:                       1
Final number of matched abstract states:               1
Final number of abstract edges:                        2
Number of generated predicates:                        0
Average predicate size (# of sub-formulas):            0.00


--------------------------------------------------------------------------------

Left(

Clause(i1(0),List(),true)
Clause(i2(bv_add(8, x, mod_cast(0, 255, 1))),List(i1(x)),bv_ult(8, x, mod_cast(0, 255, 100)))
Clause(i1(bv_add(8, x, mod_cast(0, 255, 2))),List(i2(x)),true)
Clause(FALSE,List(i1(x)),!bv_ult(8, x, mod_cast(0, 255, 200)))

Solving ...
------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             5         2


------------------------------ Analysing loops ---------------------------------
Loop heads:
   i1/1 (3 clauses, 1 templates)
Theories: Types, GroebnerMultiplication, ModuloArithmetic
State hashing enabled
Unique satisfiable clauses: 5
   1 clauses with 0 body literals
   4 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      7
Final number of abstract states:                       4
Final number of matched abstract states:               13
Final number of abstract edges:                        15
Number of generated predicates:                        16
Average predicate size (# of sub-formulas):            1.19


--------------------------------------------------------------------------------

Left(

lazabs.horn.tests.MainBV2
------------------------------- Preprocessing ----------------------------------
                                                       #clauses  #relation syms
Initially:                                             4         2


------------------------------ Analysing loops ---------------------------------
Loop heads:
   C/2 (1 clauses, 3 templates)
Theories: Types, GroebnerMultiplication, ModuloArithmetic
State hashing enabled
Unique satisfiable clauses: 3
   1 clauses with 0 body literals
   2 clauses with 1 body literals

--------------------------------- Statistics -----------------------------------
CEGAR iterations:                                      4
Final number of abstract states:                       1
Final number of matched abstract states:               5
Final number of abstract edges:                        6
Number of generated predicates:                        8
Average predicate size (# of sub-formulas):            1.00


--------------------------------------------------------------------------------

sat


array-elim.smt2
Theories: SimpleArray(1)
sat
(define-fun preds0 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool (= A 1))
(define-fun preds1 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= A 1) (or (= F 0) (or (or (and (= C E) (= F 1)) (and (= F 1) (not (= B 0)))) (and (= F 1) (not (= D 0)))))))
(define-fun preds2 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= F 0) (= A 1)))
(define-fun preds3 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= A 1) (or (and (= C 1) (= F 0)) (and (= F 0) (not (= B 0))))))
(define-fun preds4 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= A 1) (or (or (and (= C E) (= F 0)) (and (= F 0) (not (= B 0)))) (and (= F 0) (not (= D 0))))))
(define-fun preds5 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool (and (= A 1) (or (or (not (= D 0)) (not (= B 0))) (= E C))))
(define-fun preds6 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (= A 1) (or (or (and (= C E) (and (<= F 1) (>= F 0))) (and (not (= B 0)) (and (<= F 1) (>= F 0)))) (and (not (= D 0)) (and (<= F 1) (>= F 0))))))
(define-fun preds7 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (and (and (= F 0) (= A 1)) (or (or (not (= D 0)) (not (= B 0))) (= E C))))
(define-fun preds8 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool true)
